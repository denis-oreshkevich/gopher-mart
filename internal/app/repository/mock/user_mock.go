package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/denis-oreshkevich/gopher-mart/internal/app/domain/user.Repository -o ./internal/app/repository/mock/user_mock.go -n UserRepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_user "github.com/denis-oreshkevich/gopher-mart/internal/app/domain/user"
	"github.com/gojuno/minimock/v3"
)

// UserRepositoryMock implements user.Repository
type UserRepositoryMock struct {
	t minimock.Tester

	funcCreateUser          func(ctx context.Context, usr mm_user.User) (u1 mm_user.User, err error)
	inspectFuncCreateUser   func(ctx context.Context, usr mm_user.User)
	afterCreateUserCounter  uint64
	beforeCreateUserCounter uint64
	CreateUserMock          mUserRepositoryMockCreateUser

	funcFindUserByLogin          func(ctx context.Context, login string) (u1 mm_user.User, err error)
	inspectFuncFindUserByLogin   func(ctx context.Context, login string)
	afterFindUserByLoginCounter  uint64
	beforeFindUserByLoginCounter uint64
	FindUserByLoginMock          mUserRepositoryMockFindUserByLogin
}

// NewUserRepositoryMock returns a mock for user.Repository
func NewUserRepositoryMock(t minimock.Tester) *UserRepositoryMock {
	m := &UserRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateUserMock = mUserRepositoryMockCreateUser{mock: m}
	m.CreateUserMock.callArgs = []*UserRepositoryMockCreateUserParams{}

	m.FindUserByLoginMock = mUserRepositoryMockFindUserByLogin{mock: m}
	m.FindUserByLoginMock.callArgs = []*UserRepositoryMockFindUserByLoginParams{}

	return m
}

type mUserRepositoryMockCreateUser struct {
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockCreateUserExpectation
	expectations       []*UserRepositoryMockCreateUserExpectation

	callArgs []*UserRepositoryMockCreateUserParams
	mutex    sync.RWMutex
}

// UserRepositoryMockCreateUserExpectation specifies expectation struct of the Repository.CreateUser
type UserRepositoryMockCreateUserExpectation struct {
	mock    *UserRepositoryMock
	params  *UserRepositoryMockCreateUserParams
	results *UserRepositoryMockCreateUserResults
	Counter uint64
}

// UserRepositoryMockCreateUserParams contains parameters of the Repository.CreateUser
type UserRepositoryMockCreateUserParams struct {
	ctx context.Context
	usr mm_user.User
}

// UserRepositoryMockCreateUserResults contains results of the Repository.CreateUser
type UserRepositoryMockCreateUserResults struct {
	u1  mm_user.User
	err error
}

// Expect sets up expected params for Repository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) Expect(ctx context.Context, usr mm_user.User) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{}
	}

	mmCreateUser.defaultExpectation.params = &UserRepositoryMockCreateUserParams{ctx, usr}
	for _, e := range mmCreateUser.expectations {
		if minimock.Equal(e.params, mmCreateUser.defaultExpectation.params) {
			mmCreateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUser.defaultExpectation.params)
		}
	}

	return mmCreateUser
}

// Inspect accepts an inspector function that has same arguments as the Repository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) Inspect(f func(ctx context.Context, usr mm_user.User)) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.inspectFuncCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.CreateUser")
	}

	mmCreateUser.mock.inspectFuncCreateUser = f

	return mmCreateUser
}

// Return sets up results that will be returned by Repository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) Return(u1 mm_user.User, err error) *UserRepositoryMock {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{mock: mmCreateUser.mock}
	}
	mmCreateUser.defaultExpectation.results = &UserRepositoryMockCreateUserResults{u1, err}
	return mmCreateUser.mock
}

// Set uses given function f to mock the Repository.CreateUser method
func (mmCreateUser *mUserRepositoryMockCreateUser) Set(f func(ctx context.Context, usr mm_user.User) (u1 mm_user.User, err error)) *UserRepositoryMock {
	if mmCreateUser.defaultExpectation != nil {
		mmCreateUser.mock.t.Fatalf("Default expectation is already set for the Repository.CreateUser method")
	}

	if len(mmCreateUser.expectations) > 0 {
		mmCreateUser.mock.t.Fatalf("Some expectations are already set for the Repository.CreateUser method")
	}

	mmCreateUser.mock.funcCreateUser = f
	return mmCreateUser.mock
}

// When sets expectation for the Repository.CreateUser which will trigger the result defined by the following
// Then helper
func (mmCreateUser *mUserRepositoryMockCreateUser) When(ctx context.Context, usr mm_user.User) *UserRepositoryMockCreateUserExpectation {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	expectation := &UserRepositoryMockCreateUserExpectation{
		mock:   mmCreateUser.mock,
		params: &UserRepositoryMockCreateUserParams{ctx, usr},
	}
	mmCreateUser.expectations = append(mmCreateUser.expectations, expectation)
	return expectation
}

// Then sets up Repository.CreateUser return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockCreateUserExpectation) Then(u1 mm_user.User, err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockCreateUserResults{u1, err}
	return e.mock
}

// CreateUser implements user.Repository
func (mmCreateUser *UserRepositoryMock) CreateUser(ctx context.Context, usr mm_user.User) (u1 mm_user.User, err error) {
	mm_atomic.AddUint64(&mmCreateUser.beforeCreateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUser.afterCreateUserCounter, 1)

	if mmCreateUser.inspectFuncCreateUser != nil {
		mmCreateUser.inspectFuncCreateUser(ctx, usr)
	}

	mm_params := &UserRepositoryMockCreateUserParams{ctx, usr}

	// Record call args
	mmCreateUser.CreateUserMock.mutex.Lock()
	mmCreateUser.CreateUserMock.callArgs = append(mmCreateUser.CreateUserMock.callArgs, mm_params)
	mmCreateUser.CreateUserMock.mutex.Unlock()

	for _, e := range mmCreateUser.CreateUserMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmCreateUser.CreateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUser.CreateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateUser.CreateUserMock.defaultExpectation.params
		mm_got := UserRepositoryMockCreateUserParams{ctx, usr}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateUser.t.Errorf("UserRepositoryMock.CreateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateUser.CreateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateUser.t.Fatal("No results are set for the UserRepositoryMock.CreateUser")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmCreateUser.funcCreateUser != nil {
		return mmCreateUser.funcCreateUser(ctx, usr)
	}
	mmCreateUser.t.Fatalf("Unexpected call to UserRepositoryMock.CreateUser. %v %v", ctx, usr)
	return
}

// CreateUserAfterCounter returns a count of finished UserRepositoryMock.CreateUser invocations
func (mmCreateUser *UserRepositoryMock) CreateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.afterCreateUserCounter)
}

// CreateUserBeforeCounter returns a count of UserRepositoryMock.CreateUser invocations
func (mmCreateUser *UserRepositoryMock) CreateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.beforeCreateUserCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.CreateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUser *mUserRepositoryMockCreateUser) Calls() []*UserRepositoryMockCreateUserParams {
	mmCreateUser.mutex.RLock()

	argCopy := make([]*UserRepositoryMockCreateUserParams, len(mmCreateUser.callArgs))
	copy(argCopy, mmCreateUser.callArgs)

	mmCreateUser.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUserDone returns true if the count of the CreateUser invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockCreateUserDone() bool {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateUserInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockCreateUserInspect() {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.CreateUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		if m.CreateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserRepositoryMock.CreateUser")
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.CreateUser with params: %#v", *m.CreateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		m.t.Error("Expected call to UserRepositoryMock.CreateUser")
	}
}

type mUserRepositoryMockFindUserByLogin struct {
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockFindUserByLoginExpectation
	expectations       []*UserRepositoryMockFindUserByLoginExpectation

	callArgs []*UserRepositoryMockFindUserByLoginParams
	mutex    sync.RWMutex
}

// UserRepositoryMockFindUserByLoginExpectation specifies expectation struct of the Repository.FindUserByLogin
type UserRepositoryMockFindUserByLoginExpectation struct {
	mock    *UserRepositoryMock
	params  *UserRepositoryMockFindUserByLoginParams
	results *UserRepositoryMockFindUserByLoginResults
	Counter uint64
}

// UserRepositoryMockFindUserByLoginParams contains parameters of the Repository.FindUserByLogin
type UserRepositoryMockFindUserByLoginParams struct {
	ctx   context.Context
	login string
}

// UserRepositoryMockFindUserByLoginResults contains results of the Repository.FindUserByLogin
type UserRepositoryMockFindUserByLoginResults struct {
	u1  mm_user.User
	err error
}

// Expect sets up expected params for Repository.FindUserByLogin
func (mmFindUserByLogin *mUserRepositoryMockFindUserByLogin) Expect(ctx context.Context, login string) *mUserRepositoryMockFindUserByLogin {
	if mmFindUserByLogin.mock.funcFindUserByLogin != nil {
		mmFindUserByLogin.mock.t.Fatalf("UserRepositoryMock.FindUserByLogin mock is already set by Set")
	}

	if mmFindUserByLogin.defaultExpectation == nil {
		mmFindUserByLogin.defaultExpectation = &UserRepositoryMockFindUserByLoginExpectation{}
	}

	mmFindUserByLogin.defaultExpectation.params = &UserRepositoryMockFindUserByLoginParams{ctx, login}
	for _, e := range mmFindUserByLogin.expectations {
		if minimock.Equal(e.params, mmFindUserByLogin.defaultExpectation.params) {
			mmFindUserByLogin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFindUserByLogin.defaultExpectation.params)
		}
	}

	return mmFindUserByLogin
}

// Inspect accepts an inspector function that has same arguments as the Repository.FindUserByLogin
func (mmFindUserByLogin *mUserRepositoryMockFindUserByLogin) Inspect(f func(ctx context.Context, login string)) *mUserRepositoryMockFindUserByLogin {
	if mmFindUserByLogin.mock.inspectFuncFindUserByLogin != nil {
		mmFindUserByLogin.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.FindUserByLogin")
	}

	mmFindUserByLogin.mock.inspectFuncFindUserByLogin = f

	return mmFindUserByLogin
}

// Return sets up results that will be returned by Repository.FindUserByLogin
func (mmFindUserByLogin *mUserRepositoryMockFindUserByLogin) Return(u1 mm_user.User, err error) *UserRepositoryMock {
	if mmFindUserByLogin.mock.funcFindUserByLogin != nil {
		mmFindUserByLogin.mock.t.Fatalf("UserRepositoryMock.FindUserByLogin mock is already set by Set")
	}

	if mmFindUserByLogin.defaultExpectation == nil {
		mmFindUserByLogin.defaultExpectation = &UserRepositoryMockFindUserByLoginExpectation{mock: mmFindUserByLogin.mock}
	}
	mmFindUserByLogin.defaultExpectation.results = &UserRepositoryMockFindUserByLoginResults{u1, err}
	return mmFindUserByLogin.mock
}

// Set uses given function f to mock the Repository.FindUserByLogin method
func (mmFindUserByLogin *mUserRepositoryMockFindUserByLogin) Set(f func(ctx context.Context, login string) (u1 mm_user.User, err error)) *UserRepositoryMock {
	if mmFindUserByLogin.defaultExpectation != nil {
		mmFindUserByLogin.mock.t.Fatalf("Default expectation is already set for the Repository.FindUserByLogin method")
	}

	if len(mmFindUserByLogin.expectations) > 0 {
		mmFindUserByLogin.mock.t.Fatalf("Some expectations are already set for the Repository.FindUserByLogin method")
	}

	mmFindUserByLogin.mock.funcFindUserByLogin = f
	return mmFindUserByLogin.mock
}

// When sets expectation for the Repository.FindUserByLogin which will trigger the result defined by the following
// Then helper
func (mmFindUserByLogin *mUserRepositoryMockFindUserByLogin) When(ctx context.Context, login string) *UserRepositoryMockFindUserByLoginExpectation {
	if mmFindUserByLogin.mock.funcFindUserByLogin != nil {
		mmFindUserByLogin.mock.t.Fatalf("UserRepositoryMock.FindUserByLogin mock is already set by Set")
	}

	expectation := &UserRepositoryMockFindUserByLoginExpectation{
		mock:   mmFindUserByLogin.mock,
		params: &UserRepositoryMockFindUserByLoginParams{ctx, login},
	}
	mmFindUserByLogin.expectations = append(mmFindUserByLogin.expectations, expectation)
	return expectation
}

// Then sets up Repository.FindUserByLogin return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockFindUserByLoginExpectation) Then(u1 mm_user.User, err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockFindUserByLoginResults{u1, err}
	return e.mock
}

// FindUserByLogin implements user.Repository
func (mmFindUserByLogin *UserRepositoryMock) FindUserByLogin(ctx context.Context, login string) (u1 mm_user.User, err error) {
	mm_atomic.AddUint64(&mmFindUserByLogin.beforeFindUserByLoginCounter, 1)
	defer mm_atomic.AddUint64(&mmFindUserByLogin.afterFindUserByLoginCounter, 1)

	if mmFindUserByLogin.inspectFuncFindUserByLogin != nil {
		mmFindUserByLogin.inspectFuncFindUserByLogin(ctx, login)
	}

	mm_params := &UserRepositoryMockFindUserByLoginParams{ctx, login}

	// Record call args
	mmFindUserByLogin.FindUserByLoginMock.mutex.Lock()
	mmFindUserByLogin.FindUserByLoginMock.callArgs = append(mmFindUserByLogin.FindUserByLoginMock.callArgs, mm_params)
	mmFindUserByLogin.FindUserByLoginMock.mutex.Unlock()

	for _, e := range mmFindUserByLogin.FindUserByLoginMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmFindUserByLogin.FindUserByLoginMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFindUserByLogin.FindUserByLoginMock.defaultExpectation.Counter, 1)
		mm_want := mmFindUserByLogin.FindUserByLoginMock.defaultExpectation.params
		mm_got := UserRepositoryMockFindUserByLoginParams{ctx, login}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFindUserByLogin.t.Errorf("UserRepositoryMock.FindUserByLogin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFindUserByLogin.FindUserByLoginMock.defaultExpectation.results
		if mm_results == nil {
			mmFindUserByLogin.t.Fatal("No results are set for the UserRepositoryMock.FindUserByLogin")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmFindUserByLogin.funcFindUserByLogin != nil {
		return mmFindUserByLogin.funcFindUserByLogin(ctx, login)
	}
	mmFindUserByLogin.t.Fatalf("Unexpected call to UserRepositoryMock.FindUserByLogin. %v %v", ctx, login)
	return
}

// FindUserByLoginAfterCounter returns a count of finished UserRepositoryMock.FindUserByLogin invocations
func (mmFindUserByLogin *UserRepositoryMock) FindUserByLoginAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindUserByLogin.afterFindUserByLoginCounter)
}

// FindUserByLoginBeforeCounter returns a count of UserRepositoryMock.FindUserByLogin invocations
func (mmFindUserByLogin *UserRepositoryMock) FindUserByLoginBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindUserByLogin.beforeFindUserByLoginCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.FindUserByLogin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFindUserByLogin *mUserRepositoryMockFindUserByLogin) Calls() []*UserRepositoryMockFindUserByLoginParams {
	mmFindUserByLogin.mutex.RLock()

	argCopy := make([]*UserRepositoryMockFindUserByLoginParams, len(mmFindUserByLogin.callArgs))
	copy(argCopy, mmFindUserByLogin.callArgs)

	mmFindUserByLogin.mutex.RUnlock()

	return argCopy
}

// MinimockFindUserByLoginDone returns true if the count of the FindUserByLogin invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockFindUserByLoginDone() bool {
	for _, e := range m.FindUserByLoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindUserByLoginMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindUserByLoginCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindUserByLogin != nil && mm_atomic.LoadUint64(&m.afterFindUserByLoginCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindUserByLoginInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockFindUserByLoginInspect() {
	for _, e := range m.FindUserByLoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.FindUserByLogin with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindUserByLoginMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindUserByLoginCounter) < 1 {
		if m.FindUserByLoginMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserRepositoryMock.FindUserByLogin")
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.FindUserByLogin with params: %#v", *m.FindUserByLoginMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindUserByLogin != nil && mm_atomic.LoadUint64(&m.afterFindUserByLoginCounter) < 1 {
		m.t.Error("Expected call to UserRepositoryMock.FindUserByLogin")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateUserInspect()

		m.MinimockFindUserByLoginInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateUserDone() &&
		m.MinimockFindUserByLoginDone()
}
