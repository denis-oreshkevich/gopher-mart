package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/denis-oreshkevich/gopher-mart/internal/app/repository.Transactor -o ./internal/app/repository/mock/transact_mock.go -n TransactMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TransactMock implements repository.Transactor
type TransactMock struct {
	t minimock.Tester

	funcInTransaction          func(ctx context.Context, transact func(context.Context) error) (err error)
	inspectFuncInTransaction   func(ctx context.Context, transact func(context.Context) error)
	afterInTransactionCounter  uint64
	beforeInTransactionCounter uint64
	InTransactionMock          mTransactMockInTransaction
}

// NewTransactMock returns a mock for repository.Transactor
func NewTransactMock(t minimock.Tester) *TransactMock {
	m := &TransactMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.InTransactionMock = mTransactMockInTransaction{mock: m}
	m.InTransactionMock.callArgs = []*TransactMockInTransactionParams{}

	return m
}

type mTransactMockInTransaction struct {
	mock               *TransactMock
	defaultExpectation *TransactMockInTransactionExpectation
	expectations       []*TransactMockInTransactionExpectation

	callArgs []*TransactMockInTransactionParams
	mutex    sync.RWMutex
}

// TransactMockInTransactionExpectation specifies expectation struct of the Transactor.InTransaction
type TransactMockInTransactionExpectation struct {
	mock    *TransactMock
	params  *TransactMockInTransactionParams
	results *TransactMockInTransactionResults
	Counter uint64
}

// TransactMockInTransactionParams contains parameters of the Transactor.InTransaction
type TransactMockInTransactionParams struct {
	ctx      context.Context
	transact func(context.Context) error
}

// TransactMockInTransactionResults contains results of the Transactor.InTransaction
type TransactMockInTransactionResults struct {
	err error
}

// Expect sets up expected params for Transactor.InTransaction
func (mmInTransaction *mTransactMockInTransaction) Expect(ctx context.Context, transact func(context.Context) error) *mTransactMockInTransaction {
	if mmInTransaction.mock.funcInTransaction != nil {
		mmInTransaction.mock.t.Fatalf("TransactMock.InTransaction mock is already set by Set")
	}

	if mmInTransaction.defaultExpectation == nil {
		mmInTransaction.defaultExpectation = &TransactMockInTransactionExpectation{}
	}

	mmInTransaction.defaultExpectation.params = &TransactMockInTransactionParams{ctx, transact}
	for _, e := range mmInTransaction.expectations {
		if minimock.Equal(e.params, mmInTransaction.defaultExpectation.params) {
			mmInTransaction.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInTransaction.defaultExpectation.params)
		}
	}

	return mmInTransaction
}

// Inspect accepts an inspector function that has same arguments as the Transactor.InTransaction
func (mmInTransaction *mTransactMockInTransaction) Inspect(f func(ctx context.Context, transact func(context.Context) error)) *mTransactMockInTransaction {
	if mmInTransaction.mock.inspectFuncInTransaction != nil {
		mmInTransaction.mock.t.Fatalf("Inspect function is already set for TransactMock.InTransaction")
	}

	mmInTransaction.mock.inspectFuncInTransaction = f

	return mmInTransaction
}

// Return sets up results that will be returned by Transactor.InTransaction
func (mmInTransaction *mTransactMockInTransaction) Return(err error) *TransactMock {
	if mmInTransaction.mock.funcInTransaction != nil {
		mmInTransaction.mock.t.Fatalf("TransactMock.InTransaction mock is already set by Set")
	}

	if mmInTransaction.defaultExpectation == nil {
		mmInTransaction.defaultExpectation = &TransactMockInTransactionExpectation{mock: mmInTransaction.mock}
	}
	mmInTransaction.defaultExpectation.results = &TransactMockInTransactionResults{err}
	return mmInTransaction.mock
}

// Set uses given function f to mock the Transactor.InTransaction method
func (mmInTransaction *mTransactMockInTransaction) Set(f func(ctx context.Context, transact func(context.Context) error) (err error)) *TransactMock {
	if mmInTransaction.defaultExpectation != nil {
		mmInTransaction.mock.t.Fatalf("Default expectation is already set for the Transactor.InTransaction method")
	}

	if len(mmInTransaction.expectations) > 0 {
		mmInTransaction.mock.t.Fatalf("Some expectations are already set for the Transactor.InTransaction method")
	}

	mmInTransaction.mock.funcInTransaction = f
	return mmInTransaction.mock
}

// When sets expectation for the Transactor.InTransaction which will trigger the result defined by the following
// Then helper
func (mmInTransaction *mTransactMockInTransaction) When(ctx context.Context, transact func(context.Context) error) *TransactMockInTransactionExpectation {
	if mmInTransaction.mock.funcInTransaction != nil {
		mmInTransaction.mock.t.Fatalf("TransactMock.InTransaction mock is already set by Set")
	}

	expectation := &TransactMockInTransactionExpectation{
		mock:   mmInTransaction.mock,
		params: &TransactMockInTransactionParams{ctx, transact},
	}
	mmInTransaction.expectations = append(mmInTransaction.expectations, expectation)
	return expectation
}

// Then sets up Transactor.InTransaction return parameters for the expectation previously defined by the When method
func (e *TransactMockInTransactionExpectation) Then(err error) *TransactMock {
	e.results = &TransactMockInTransactionResults{err}
	return e.mock
}

// InTransaction implements repository.Transactor
func (mmInTransaction *TransactMock) InTransaction(ctx context.Context, transact func(context.Context) error) (err error) {
	mm_atomic.AddUint64(&mmInTransaction.beforeInTransactionCounter, 1)
	defer mm_atomic.AddUint64(&mmInTransaction.afterInTransactionCounter, 1)

	if mmInTransaction.inspectFuncInTransaction != nil {
		mmInTransaction.inspectFuncInTransaction(ctx, transact)
	}

	mm_params := &TransactMockInTransactionParams{ctx, transact}

	// Record call args
	mmInTransaction.InTransactionMock.mutex.Lock()
	mmInTransaction.InTransactionMock.callArgs = append(mmInTransaction.InTransactionMock.callArgs, mm_params)
	mmInTransaction.InTransactionMock.mutex.Unlock()

	for _, e := range mmInTransaction.InTransactionMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmInTransaction.InTransactionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInTransaction.InTransactionMock.defaultExpectation.Counter, 1)
		mm_want := mmInTransaction.InTransactionMock.defaultExpectation.params
		mm_got := TransactMockInTransactionParams{ctx, transact}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInTransaction.t.Errorf("TransactMock.InTransaction got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInTransaction.InTransactionMock.defaultExpectation.results
		if mm_results == nil {
			mmInTransaction.t.Fatal("No results are set for the TransactMock.InTransaction")
		}
		return (*mm_results).err
	}
	if mmInTransaction.funcInTransaction != nil {
		return mmInTransaction.funcInTransaction(ctx, transact)
	}
	mmInTransaction.t.Fatalf("Unexpected call to TransactMock.InTransaction. %v %v", ctx, transact)
	return
}

// InTransactionAfterCounter returns a count of finished TransactMock.InTransaction invocations
func (mmInTransaction *TransactMock) InTransactionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInTransaction.afterInTransactionCounter)
}

// InTransactionBeforeCounter returns a count of TransactMock.InTransaction invocations
func (mmInTransaction *TransactMock) InTransactionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInTransaction.beforeInTransactionCounter)
}

// Calls returns a list of arguments used in each call to TransactMock.InTransaction.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInTransaction *mTransactMockInTransaction) Calls() []*TransactMockInTransactionParams {
	mmInTransaction.mutex.RLock()

	argCopy := make([]*TransactMockInTransactionParams, len(mmInTransaction.callArgs))
	copy(argCopy, mmInTransaction.callArgs)

	mmInTransaction.mutex.RUnlock()

	return argCopy
}

// MinimockInTransactionDone returns true if the count of the InTransaction invocations corresponds
// the number of defined expectations
func (m *TransactMock) MinimockInTransactionDone() bool {
	for _, e := range m.InTransactionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InTransactionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInTransactionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInTransaction != nil && mm_atomic.LoadUint64(&m.afterInTransactionCounter) < 1 {
		return false
	}
	return true
}

// MinimockInTransactionInspect logs each unmet expectation
func (m *TransactMock) MinimockInTransactionInspect() {
	for _, e := range m.InTransactionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransactMock.InTransaction with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InTransactionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInTransactionCounter) < 1 {
		if m.InTransactionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TransactMock.InTransaction")
		} else {
			m.t.Errorf("Expected call to TransactMock.InTransaction with params: %#v", *m.InTransactionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInTransaction != nil && mm_atomic.LoadUint64(&m.afterInTransactionCounter) < 1 {
		m.t.Error("Expected call to TransactMock.InTransaction")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TransactMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockInTransactionInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TransactMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TransactMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockInTransactionDone()
}
