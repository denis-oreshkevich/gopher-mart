package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/denis-oreshkevich/gopher-mart/internal/app/domain/accrual.Repository -o ./internal/app/repository/mock/accrual_mock.go -n AccrualMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_accrual "github.com/denis-oreshkevich/gopher-mart/internal/app/domain/accrual"
	"github.com/gojuno/minimock/v3"
)

// AccrualMock implements accrual.Repository
type AccrualMock struct {
	t minimock.Tester

	funcFindAccrualByOrderNum          func(ctx context.Context, num string) (a1 mm_accrual.Accrual, err error)
	inspectFuncFindAccrualByOrderNum   func(ctx context.Context, num string)
	afterFindAccrualByOrderNumCounter  uint64
	beforeFindAccrualByOrderNumCounter uint64
	FindAccrualByOrderNumMock          mAccrualMockFindAccrualByOrderNum
}

// NewAccrualMock returns a mock for accrual.Repository
func NewAccrualMock(t minimock.Tester) *AccrualMock {
	m := &AccrualMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FindAccrualByOrderNumMock = mAccrualMockFindAccrualByOrderNum{mock: m}
	m.FindAccrualByOrderNumMock.callArgs = []*AccrualMockFindAccrualByOrderNumParams{}

	return m
}

type mAccrualMockFindAccrualByOrderNum struct {
	mock               *AccrualMock
	defaultExpectation *AccrualMockFindAccrualByOrderNumExpectation
	expectations       []*AccrualMockFindAccrualByOrderNumExpectation

	callArgs []*AccrualMockFindAccrualByOrderNumParams
	mutex    sync.RWMutex
}

// AccrualMockFindAccrualByOrderNumExpectation specifies expectation struct of the Repository.FindAccrualByOrderNum
type AccrualMockFindAccrualByOrderNumExpectation struct {
	mock    *AccrualMock
	params  *AccrualMockFindAccrualByOrderNumParams
	results *AccrualMockFindAccrualByOrderNumResults
	Counter uint64
}

// AccrualMockFindAccrualByOrderNumParams contains parameters of the Repository.FindAccrualByOrderNum
type AccrualMockFindAccrualByOrderNumParams struct {
	ctx context.Context
	num string
}

// AccrualMockFindAccrualByOrderNumResults contains results of the Repository.FindAccrualByOrderNum
type AccrualMockFindAccrualByOrderNumResults struct {
	a1  mm_accrual.Accrual
	err error
}

// Expect sets up expected params for Repository.FindAccrualByOrderNum
func (mmFindAccrualByOrderNum *mAccrualMockFindAccrualByOrderNum) Expect(ctx context.Context, num string) *mAccrualMockFindAccrualByOrderNum {
	if mmFindAccrualByOrderNum.mock.funcFindAccrualByOrderNum != nil {
		mmFindAccrualByOrderNum.mock.t.Fatalf("AccrualMock.FindAccrualByOrderNum mock is already set by Set")
	}

	if mmFindAccrualByOrderNum.defaultExpectation == nil {
		mmFindAccrualByOrderNum.defaultExpectation = &AccrualMockFindAccrualByOrderNumExpectation{}
	}

	mmFindAccrualByOrderNum.defaultExpectation.params = &AccrualMockFindAccrualByOrderNumParams{ctx, num}
	for _, e := range mmFindAccrualByOrderNum.expectations {
		if minimock.Equal(e.params, mmFindAccrualByOrderNum.defaultExpectation.params) {
			mmFindAccrualByOrderNum.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFindAccrualByOrderNum.defaultExpectation.params)
		}
	}

	return mmFindAccrualByOrderNum
}

// Inspect accepts an inspector function that has same arguments as the Repository.FindAccrualByOrderNum
func (mmFindAccrualByOrderNum *mAccrualMockFindAccrualByOrderNum) Inspect(f func(ctx context.Context, num string)) *mAccrualMockFindAccrualByOrderNum {
	if mmFindAccrualByOrderNum.mock.inspectFuncFindAccrualByOrderNum != nil {
		mmFindAccrualByOrderNum.mock.t.Fatalf("Inspect function is already set for AccrualMock.FindAccrualByOrderNum")
	}

	mmFindAccrualByOrderNum.mock.inspectFuncFindAccrualByOrderNum = f

	return mmFindAccrualByOrderNum
}

// Return sets up results that will be returned by Repository.FindAccrualByOrderNum
func (mmFindAccrualByOrderNum *mAccrualMockFindAccrualByOrderNum) Return(a1 mm_accrual.Accrual, err error) *AccrualMock {
	if mmFindAccrualByOrderNum.mock.funcFindAccrualByOrderNum != nil {
		mmFindAccrualByOrderNum.mock.t.Fatalf("AccrualMock.FindAccrualByOrderNum mock is already set by Set")
	}

	if mmFindAccrualByOrderNum.defaultExpectation == nil {
		mmFindAccrualByOrderNum.defaultExpectation = &AccrualMockFindAccrualByOrderNumExpectation{mock: mmFindAccrualByOrderNum.mock}
	}
	mmFindAccrualByOrderNum.defaultExpectation.results = &AccrualMockFindAccrualByOrderNumResults{a1, err}
	return mmFindAccrualByOrderNum.mock
}

// Set uses given function f to mock the Repository.FindAccrualByOrderNum method
func (mmFindAccrualByOrderNum *mAccrualMockFindAccrualByOrderNum) Set(f func(ctx context.Context, num string) (a1 mm_accrual.Accrual, err error)) *AccrualMock {
	if mmFindAccrualByOrderNum.defaultExpectation != nil {
		mmFindAccrualByOrderNum.mock.t.Fatalf("Default expectation is already set for the Repository.FindAccrualByOrderNum method")
	}

	if len(mmFindAccrualByOrderNum.expectations) > 0 {
		mmFindAccrualByOrderNum.mock.t.Fatalf("Some expectations are already set for the Repository.FindAccrualByOrderNum method")
	}

	mmFindAccrualByOrderNum.mock.funcFindAccrualByOrderNum = f
	return mmFindAccrualByOrderNum.mock
}

// When sets expectation for the Repository.FindAccrualByOrderNum which will trigger the result defined by the following
// Then helper
func (mmFindAccrualByOrderNum *mAccrualMockFindAccrualByOrderNum) When(ctx context.Context, num string) *AccrualMockFindAccrualByOrderNumExpectation {
	if mmFindAccrualByOrderNum.mock.funcFindAccrualByOrderNum != nil {
		mmFindAccrualByOrderNum.mock.t.Fatalf("AccrualMock.FindAccrualByOrderNum mock is already set by Set")
	}

	expectation := &AccrualMockFindAccrualByOrderNumExpectation{
		mock:   mmFindAccrualByOrderNum.mock,
		params: &AccrualMockFindAccrualByOrderNumParams{ctx, num},
	}
	mmFindAccrualByOrderNum.expectations = append(mmFindAccrualByOrderNum.expectations, expectation)
	return expectation
}

// Then sets up Repository.FindAccrualByOrderNum return parameters for the expectation previously defined by the When method
func (e *AccrualMockFindAccrualByOrderNumExpectation) Then(a1 mm_accrual.Accrual, err error) *AccrualMock {
	e.results = &AccrualMockFindAccrualByOrderNumResults{a1, err}
	return e.mock
}

// FindAccrualByOrderNum implements accrual.Repository
func (mmFindAccrualByOrderNum *AccrualMock) FindAccrualByOrderNum(ctx context.Context, num string) (a1 mm_accrual.Accrual, err error) {
	mm_atomic.AddUint64(&mmFindAccrualByOrderNum.beforeFindAccrualByOrderNumCounter, 1)
	defer mm_atomic.AddUint64(&mmFindAccrualByOrderNum.afterFindAccrualByOrderNumCounter, 1)

	if mmFindAccrualByOrderNum.inspectFuncFindAccrualByOrderNum != nil {
		mmFindAccrualByOrderNum.inspectFuncFindAccrualByOrderNum(ctx, num)
	}

	mm_params := &AccrualMockFindAccrualByOrderNumParams{ctx, num}

	// Record call args
	mmFindAccrualByOrderNum.FindAccrualByOrderNumMock.mutex.Lock()
	mmFindAccrualByOrderNum.FindAccrualByOrderNumMock.callArgs = append(mmFindAccrualByOrderNum.FindAccrualByOrderNumMock.callArgs, mm_params)
	mmFindAccrualByOrderNum.FindAccrualByOrderNumMock.mutex.Unlock()

	for _, e := range mmFindAccrualByOrderNum.FindAccrualByOrderNumMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1, e.results.err
		}
	}

	if mmFindAccrualByOrderNum.FindAccrualByOrderNumMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFindAccrualByOrderNum.FindAccrualByOrderNumMock.defaultExpectation.Counter, 1)
		mm_want := mmFindAccrualByOrderNum.FindAccrualByOrderNumMock.defaultExpectation.params
		mm_got := AccrualMockFindAccrualByOrderNumParams{ctx, num}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFindAccrualByOrderNum.t.Errorf("AccrualMock.FindAccrualByOrderNum got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFindAccrualByOrderNum.FindAccrualByOrderNumMock.defaultExpectation.results
		if mm_results == nil {
			mmFindAccrualByOrderNum.t.Fatal("No results are set for the AccrualMock.FindAccrualByOrderNum")
		}
		return (*mm_results).a1, (*mm_results).err
	}
	if mmFindAccrualByOrderNum.funcFindAccrualByOrderNum != nil {
		return mmFindAccrualByOrderNum.funcFindAccrualByOrderNum(ctx, num)
	}
	mmFindAccrualByOrderNum.t.Fatalf("Unexpected call to AccrualMock.FindAccrualByOrderNum. %v %v", ctx, num)
	return
}

// FindAccrualByOrderNumAfterCounter returns a count of finished AccrualMock.FindAccrualByOrderNum invocations
func (mmFindAccrualByOrderNum *AccrualMock) FindAccrualByOrderNumAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindAccrualByOrderNum.afterFindAccrualByOrderNumCounter)
}

// FindAccrualByOrderNumBeforeCounter returns a count of AccrualMock.FindAccrualByOrderNum invocations
func (mmFindAccrualByOrderNum *AccrualMock) FindAccrualByOrderNumBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFindAccrualByOrderNum.beforeFindAccrualByOrderNumCounter)
}

// Calls returns a list of arguments used in each call to AccrualMock.FindAccrualByOrderNum.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFindAccrualByOrderNum *mAccrualMockFindAccrualByOrderNum) Calls() []*AccrualMockFindAccrualByOrderNumParams {
	mmFindAccrualByOrderNum.mutex.RLock()

	argCopy := make([]*AccrualMockFindAccrualByOrderNumParams, len(mmFindAccrualByOrderNum.callArgs))
	copy(argCopy, mmFindAccrualByOrderNum.callArgs)

	mmFindAccrualByOrderNum.mutex.RUnlock()

	return argCopy
}

// MinimockFindAccrualByOrderNumDone returns true if the count of the FindAccrualByOrderNum invocations corresponds
// the number of defined expectations
func (m *AccrualMock) MinimockFindAccrualByOrderNumDone() bool {
	for _, e := range m.FindAccrualByOrderNumMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindAccrualByOrderNumMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindAccrualByOrderNumCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindAccrualByOrderNum != nil && mm_atomic.LoadUint64(&m.afterFindAccrualByOrderNumCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindAccrualByOrderNumInspect logs each unmet expectation
func (m *AccrualMock) MinimockFindAccrualByOrderNumInspect() {
	for _, e := range m.FindAccrualByOrderNumMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AccrualMock.FindAccrualByOrderNum with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindAccrualByOrderNumMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindAccrualByOrderNumCounter) < 1 {
		if m.FindAccrualByOrderNumMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AccrualMock.FindAccrualByOrderNum")
		} else {
			m.t.Errorf("Expected call to AccrualMock.FindAccrualByOrderNum with params: %#v", *m.FindAccrualByOrderNumMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFindAccrualByOrderNum != nil && mm_atomic.LoadUint64(&m.afterFindAccrualByOrderNumCounter) < 1 {
		m.t.Error("Expected call to AccrualMock.FindAccrualByOrderNum")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AccrualMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockFindAccrualByOrderNumInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AccrualMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AccrualMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFindAccrualByOrderNumDone()
}
